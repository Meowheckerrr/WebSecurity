provider "aws" {
    region = "us-east-1"
  }
  
  
  resource "aws_vpc" "myvpc"{
      cidr_block="192.168.0.0/16"
      tags = {
          Name = "myvpc"
      }
  }
  
  resource "aws_subnet" "testvpc-web" {
      vpc_id = "${aws_vpc.myvpc.id}"
      cidr_block = "192.168.1.0/24"
      availability_zone = "us-east-1a"
      tags = {
          Name = "testvpc-web"
      }
  }
  
  #IGW
  
  resource "aws_internet_gateway" "igw" {
      vpc_id="${aws_vpc.myvpc.id}" # 綁定VPC
      tags = {
          Name = "myvpcvpc-igw"
      }
  }
  
  
  resource "aws_route_table" "myrt" {
      vpc_id="${aws_vpc.myvpc.id}"
  
      route {
          cidr_block="0.0.0.0/0"
          gateway_id = "${aws_internet_gateway.igw.id}"
      }
  
      tags = {
          Name = "myvpc-rt"
      }
  }
  
  
  resource "aws_route_table_association" "myrt_assoc" {
      subnet_id = aws_subnet.testvpc-web.id
      route_table_id = aws_route_table.myrt.id
  }
  
  resource "aws_security_group" "sg_myvpc" {
      name = "sg_myvpc"
      description="security group for myvpc"
      vpc_id="${aws_vpc.myvpc.id}"
  
      ingress {
         description = "HTTPS traffic"
         from_port = 443
         to_port = 443
         protocol ="tcp"
         cidr_blocks = ["0.0.0.0/0"]   
      }
  
      ingress {
         description = "HTTP traffic"
         from_port = 80
         to_port = 80
         protocol ="tcp"
         cidr_blocks = ["0.0.0.0/0"]   
      }
  
      ingress {
         description = "SSH traffic"
         from_port = 22
         to_port = 22
         protocol ="tcp"
         cidr_blocks = ["0.0.0.0/0"]   
      }
  
      egress {
          from_port = 0
          to_port = 0
          protocol ="-1"
          cidr_blocks= ["0.0.0.0/0"]  
      }
  
      tags = {
          Name = "sg_myvpc"
      }
  }
  
  # InterfaceALB
  resource "aws_network_interface" "Alb-nic" {
      subnet_id = aws_subnet.testvpc-web.id
      private_ips=["192.168.1.100"]
      security_groups = ["${aws_security_group.sg_myvpc.id}"]  
  }

  # Assign Elastic IP  
  resource "aws_eip" "web-eip" {
      vpc = true
      network_interface = aws_network_interface.Alb-nic.id
      associate_with_private_ip = "192.168.1.100"
      depends_on = [aws_internet_gateway.igw] 
  }



  #Interface1
  resource "aws_network_interface" "webserver1-nic" {
    subnet_id   = aws_subnet.testvpc-web.id
    private_ips = ["192.168.1.200"]
    security_groups = ["${aws_security_group.sg_myvpc.id}"]
    
  }

  #Interface2
  resource "aws_network_interface" "webserver2-nic" {
    subnet_id   = aws_subnet.testvpc-web.id
    private_ips = ["192.168.1.300"]
    security_groups = ["${aws_security_group.sg_myvpc.id}"]
    
  }





#Instance1
  resource "aws_instance" "webserver" {
      ami="ami-0c7217cdde317cfec"
      instance_type = "t2.micro"
      availability_zone = "us-east-1a"
      key_name = "meowheckerKey2"
    
      network_interface {
        device_index = 0
        network_interface_id = aws_network_interface.webserver1-nic.id
      }
      
      user_data = <<-EOF
                  #!/bin/bash
                  sudo apt update -y
                  sudo apt install apache2 -y
                  sudo systemctl start apache2
                  sudo bash -c 'web server 1> /var/www/html/index.html'
                  EOF   
      tags ={
        Name = "web-server1"
      }
    }
    
#Instance2 
  resource "aws_instance" "webserver2" {
    ami="ami-0c7217cdde317cfec"
    instance_type = "t2.micro"
    availability_zone = "us-east-1a"
    key_name = "meowheckerKey2"
  
    network_interface {
      device_index = 0
      network_interface_id = aws_network_interface.webserver2-nic.id
    }
    
    user_data = <<-EOF
                #!/bin/bash
                sudo apt update -y
                sudo apt install apache2 -y
                sudo systemctl start apache2
                sudo bash -c ' web server 2 > /var/www/html/index.html'
                EOF   
    tags ={
      Name = "web-server2"
    }
  }

  #TargetGroup1
  resource "aws_lb_target_group" "targetGroup1" {
    name     = "targetGroup1"
    port     = 80
    protocol = "HTTP"
    vpc_id   = aws_vpc.myvpc.id
  }

  resource "aws_lb_target_group" "targetGroup2" {
    name     = "targetGroup2"
    port     = 80
    protocol = "HTTP"
    vpc_id   = aws_vpc.myvpc.id
  }
  
  module "alb" {
    source = "terraform-aws-modules/alb/aws"
  
    name    = "my-alb"
    subnets = ["subnet-abcde012", "subnet-bcde012a"]




