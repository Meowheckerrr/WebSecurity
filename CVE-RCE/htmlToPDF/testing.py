


# Bypass Condiction !
def __rl_is_allowed_name__(self, name):
		"""Check names if they are allowed.
		If ``allow_magic_methods is True`` names in `__allowed_magic_methods__`
		are additionally allowed although their names start with `_`.
		"""
		if isinstance(name,strTypes):
			if name in __rl_unsafe__ or (name.startswith('__')
				and name!='__'
				and name not in self.allowed_magic_methods):
				raise BadCode('unsafe access of %s' % name)




each time invoke -1  'mutate'    : lambda self: {setattr(self, 'mutated', self.mutated - 1)},
判斷 True or False '__eq__'    : lambda self, x: self.mutate() and self.mutated < 0 and str(self) == x,
over Attribute  startswith -> allways Flase !

Word = type('Word', (str,), {
            'mutated'   : 1,
            'startswith': lambda self, x: False,
            '__eq__'    : lambda self, x: self.mutate() and self.mutated < 0 and str(self) == x,
            'mutate'    : lambda self: {setattr(self, 'mutated', self.mutated - 1)},
            '__hash__'  : lambda self: hash(str(self))
            })
code = Word('__code__')
print(code == '__code__')    ## prints False
print(code == '__code__')    ## prints True
print(code == '__code__')    ## prints True
print(code == '__code__')    ## prints True

print(code.startswith('__import__')) ## prints False
print(code.startswith('__import__')) ## prints False
print(code.startswith('__import__')) ## prints False
print(code.startswith('__import__')) ## prints False
